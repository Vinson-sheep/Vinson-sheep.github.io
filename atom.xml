<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vinson-sheep</title>
  
  <subtitle>Vinson Sheep is on his time zone</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2020-06-16T04:36:59.023Z</updated>
  <id>/</id>
  
  <author>
    <name>Vinson-sheep</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>(ubuntu)DOSBox编写汇编语言程序</title>
    <link href="/2020/06/16/ubuntu-DOSBox%E7%BC%96%E5%86%99%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/"/>
    <id>/2020/06/16/ubuntu-DOSBox编写汇编语言程序/</id>
    <published>2020-06-16T04:21:20.000Z</published>
    <updated>2020-06-16T04:36:59.023Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在学习汇编语言，无奈win10并不能自带debug。虽然能够安装DOSBox，但是不兼容masm.exe、link.exe等等。此文章转载了一篇关于在ubuntu中部署DOSBox实现编译连接.asm文件的文章。<br><a id="more"></a></p></blockquote><p><a href="https://blog.csdn.net/qq_41584385/article/details/101855795" target="_blank" rel="noopener">文章来源</a></p><h2 id="一、安装dosbox"><a href="#一、安装dosbox" class="headerlink" title="一、安装dosbox"></a>一、安装dosbox</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install dosbox</span><br></pre></td></tr></table></figure><p>安装成功之后可以通过命令行输入<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dosbox</span></span><br></pre></td></tr></table></figure></p><p>来开启，也可以在左下角“显示应用程序”中打开。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img/20200616_1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="二、操作步骤"><a href="#二、操作步骤" class="headerlink" title="二、操作步骤"></a>二、操作步骤</h2><h3 id="1、选择一个目录，其中尽可能准备好以下文件"><a href="#1、选择一个目录，其中尽可能准备好以下文件" class="headerlink" title="1、选择一个目录，其中尽可能准备好以下文件"></a>1、选择一个目录，其中尽可能准备好以下文件</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img/20200616_2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这些文件中，必须有<strong>MASM.EXE</strong>和<strong>LINK.EXE</strong>。</p><p>调试需要，最好配上<strong>DEBUG.EXE</strong>。</p><p>另外，<strong>hello.asm</strong>文件是提前用vim编辑器写好的，即输出hello world。</p><p>附上这些文件的<a href="https://pan.baidu.com/s/1GwUaIruPeLQUoKVMq5_ROw#list/path=%2F" target="_blank" rel="noopener">下载链接</a>，提取码：<strong>ev2k</strong></p><p>应该注意，默认的版本是不支持中文的，所以尽量避免输出中文，或者安装汉化版本。</p><p>hello.asm内容如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.model</span>  small<span class="comment">;小型存储模式</span></span><br><span class="line"><span class="meta">.stack</span><span class="comment">;定义堆栈段</span></span><br><span class="line"><span class="meta">.data</span><span class="comment">;定义数据段</span></span><br><span class="line">string<span class="built_in">db</span>   <span class="string">'Hello, world!'</span><span class="comment">;预存字符串、</span></span><br><span class="line"><span class="built_in">db</span>   <span class="number">0dh</span>, <span class="number">0ah</span>, <span class="string">'$'</span><span class="comment">;回车换行结束</span></span><br><span class="line"><span class="meta">.code</span><span class="comment">;定义代码段</span></span><br><span class="line"><span class="symbol">start:</span><span class="keyword">mov</span>   <span class="built_in">ax</span>, @data<span class="comment">;装数据段(段</span></span><br><span class="line"><span class="keyword">mov</span>   <span class="built_in">ds</span>, <span class="built_in">ax</span><span class="comment">; 地址送DS)</span></span><br><span class="line"><span class="keyword">lea</span>    <span class="built_in">dx</span>, string  <span class="comment">;调用21H号</span></span><br><span class="line"><span class="keyword">mov</span>   <span class="number">ah</span>, <span class="number">9</span><span class="comment">; 中断，显示</span></span><br><span class="line"><span class="keyword">int</span>   <span class="number">21h</span><span class="comment">; 字符串</span></span><br><span class="line"><span class="keyword">mov</span>   <span class="built_in">ax</span>, <span class="number">4c00h</span><span class="comment">;调用21H号中</span></span><br><span class="line"><span class="keyword">int</span>   <span class="number">21h</span><span class="comment">; 断，返回</span></span><br><span class="line">end   start<span class="comment">; 结束汇编</span></span><br></pre></td></tr></table></figure></p><h3 id="2、打开dosbox后，运行hello-asm"><a href="#2、打开dosbox后，运行hello-asm" class="headerlink" title="2、打开dosbox后，运行hello.asm"></a>2、打开dosbox后，运行hello.asm</h3><p>（1）设置虚拟磁盘c为上述文件存储的目录，以笔者目录为例：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount c <span class="regexp">/home/</span>zhanwangc<span class="regexp">/download/m</span>asm</span><br></pre></td></tr></table></figure></p><p>（2）进到虚拟磁盘c<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">c:</span></span><br></pre></td></tr></table></figure></p><p>（3）显示目录下情况，查看文件是否齐全<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span></span><br></pre></td></tr></table></figure></p><p>（4）编译为obj文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masm hello.<span class="keyword">asm</span></span><br></pre></td></tr></table></figure></p><p>输入上述命令后，连续点击三个回车，即默认编译完成。</p><p>（5）生成可执行文件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">link</span> <span class="selector-tag">hello</span><span class="selector-class">.obj</span></span><br></pre></td></tr></table></figure></p><p>也是连续点击三个回车，默认生成。</p><p>（6）运行<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">hello</span><span class="selector-class">.exe</span></span><br></pre></td></tr></table></figure></p><p>运行成功显示如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img/20200616_3.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近在学习汇编语言，无奈win10并不能自带debug。虽然能够安装DOSBox，但是不兼容masm.exe、link.exe等等。此文章转载了一篇关于在ubuntu中部署DOSBox实现编译连接.asm文件的文章。&lt;br&gt;
    
    </summary>
    
      <category term="语言学习" scheme="/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ubuntu" scheme="/tags/ubuntu/"/>
    
      <category term="assembly language" scheme="/tags/assembly-language/"/>
    
  </entry>
  
  <entry>
    <title>2020中山大学系统科学与工程学院（复试经验）</title>
    <link href="/2020/06/09/2020%E4%B8%AD%E5%B1%B1%E5%A4%A7%E5%AD%A6%E7%B3%BB%E7%BB%9F%E7%A7%91%E5%AD%A6%E4%B8%8E%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2%EF%BC%88%E5%A4%8D%E8%AF%95%E7%BB%8F%E9%AA%8C%EF%BC%89/"/>
    <id>/2020/06/09/2020中山大学系统科学与工程学院（复试经验）/</id>
    <published>2020-06-09T07:32:31.000Z</published>
    <updated>2020-06-09T10:13:22.817Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2020年中山大学系统科学与工程学院（复试），计算机科学与技术（学硕），拟录取。<br><a id="more"></a></p></blockquote><h2 id="1-我"><a href="#1-我" class="headerlink" title="1. 我"></a>1. 我</h2><p>跨考生，本科化学。初试359，复试352.15，总分711.15，排名第二。</p><p>复试书目：</p><ul><li>《C Prime Plus》（第六版）（Stephen Prata）</li><li>《模拟考场 二级C》、《上机考试题库 二级C》</li><li>《离散数学》（第二版）（曲婉玲 耿素云 张立昂）</li><li>《计算机英语学生用书》（第三版）（姜同强 苗天顺）</li><li>《数学专业英语》（第三版）（吴烔圻）</li><li>《算法笔记》（胡凡 曾磊）</li><li>《算法笔记——上机训练实战指南》（胡凡 曾磊）</li><li>《软件工程导论》（第六版）（张海藩 牟永敏）</li><li>《数据库系统概论》（第五版）（王珊 萨师煊）</li><li>《数字电子技术》（第四版）（江晓安 周慧鑫 付少锋）</li><li>《408四大金刚》、《数学一三大猛兽》</li><li>《人工智能》（相关书籍）</li><li>《网络安全》（未完成）</li></ul><p>事实证明，复习的都不考</p><h2 id="2-考情分析"><a href="#2-考情分析" class="headerlink" title="2. 考情分析"></a>2. 考情分析</h2><p>2019年，中大数据院和系统院在CS上统一招生。数据院招生14个，系统院招生10个。</p><p>2020年，中大数据院和系统院分开招生。数据院招生12人，系统院只有15个名额，且全部用于调剂（很迷惑）。系统院的调剂会比数据院的正式复试晚很多很多，也就是说，系统院就是给你第二次机会了。</p><p>今年系统院复试线为280（非常低），从招收情况看，只要复试分数及格，点击就送。</p><p>CS进入复试的一共11人，刷了5人，证明不是胡来的。</p><h2 id="3-复试内容"><a href="#3-复试内容" class="headerlink" title="3. 复试内容"></a>3. 复试内容</h2><h3 id="3-1-自我介绍（中文）"><a href="#3-1-自我介绍（中文）" class="headerlink" title="3.1 自我介绍（中文）"></a>3.1 自我介绍（中文）</h3><p>这个环节是我没想到了，我那时候几乎蒙了。历年计算机面试都没有进行自我介绍，还好我之前在数据院面试的时候准备了一份（没有用上），内容不太适用于新学院。</p><p>老师会给你两分钟介绍，然后进行提问。</p><ul><li>Q1：你是往届生，考研的前一年主要是干什么？</li><li>Q2：大学期间有学过什么跟计算机相关的课程？</li><li>Q3：学过数据结构的吧？说说什么是哈希函数？</li></ul><h3 id="3-2-英语翻译"><a href="#3-2-英语翻译" class="headerlink" title="3.2 英语翻译"></a>3.2 英语翻译</h3><p>就是给出一篇短文，长度大概是半张A4纸，字很大。要求先朗读短文，比较简单。然后要求翻译前两句话，比较难，但是意思到位就行。我抽到了关于网络安全的文章，要求翻译的句子语法异常复杂，但是抽取句子关键字然后大概翻译一下就过关，老师也没有问什么。</p><h3 id="3-3-专业面试"><a href="#3-3-专业面试" class="headerlink" title="3.3 专业面试"></a>3.3 专业面试</h3><p>给出是个编号，一个编号对应一道题，让你抽两道题。</p><ul><li>Q1：C语言中有什么程序结构？（我第一次看成数据结构了，实际上很简单，但是我一开始没往那方面想）</li><li>Q2：什么是对称加密和非对称加密（网络安全，我偏偏就没有补这课）</li></ul><h3 id="3-4-拓展面试"><a href="#3-4-拓展面试" class="headerlink" title="3.4 拓展面试"></a>3.4 拓展面试</h3><p>还是抽题。</p><ul><li>Q：什么是机器学习？有哪些类型？（具体忘了，大概就是这么个意思）</li><li>追问：机器学习算法的有哪些？举几个例子。</li><li>追问：请论述机器学习和深度学习的关系（深度学习是实现方式之一）</li><li>追问：如果我把你分配到网络安全，你会怎么做？（问这问题是因为我一直强调AI的作用，送命题）</li></ul><h2 id="4-碎碎念"><a href="#4-碎碎念" class="headerlink" title="4. 碎碎念"></a>4. 碎碎念</h2><p>今年疫情使得复试情况特殊，但是这是系统院今年第一次自己组织复试，很可能下一年就照着这个模板进行线下复试。不管怎么样，自我介绍、线上机试等都是必须准备的。</p><p>系统院今年复试特别的难。数据院复试考的大部分都是基本知识，都是你应该会，只是比较偏门。系统院的复试范围跟数据院一致，却延伸了网络安全、人工智能、区块链（其他考生提供）等题目，对跨考生及其不利。跨考生要想成功，可能需要跳出中大的复试目录，比较累。</p><p>中大的复试特别墨迹。我先列出时间线给大家感受一下：</p><ul><li>2020.5.06，第一波高校开始复试；</li><li>2020.5.14，数据院发复试通知；</li><li>2020.5.19，数据院开始复试；</li><li>2020.5.20，调剂系统开启；</li><li>2020.5.24，数据院发复试结果；</li><li>2020.6.04，系统院发复试通知；</li><li>2020.6.09，系统院发复试结果</li></ul><p>注意到，<strong>第一波复试</strong>到<strong>数据院发结果</strong>这段时间大于两周，第一波复试到系统院发结果这段时间大于一个月，这意味着你考中大基本就没有外校调剂了。历年中大华工都是很迟复试的，所以慎入。</p><p>另外，<strong>数据院发复试结果</strong>到<strong>系统院发复试通知</strong>这段时间大于十天，这段时间足够一个在数据院被刷的CS考生在校外递交材料、调剂复试、出成绩可。也就是说，很多高分人才在等待中流失，最后在系统院报名的寥寥无几（3/15）。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2020年中山大学系统科学与工程学院（复试），计算机科学与技术（学硕），拟录取。&lt;br&gt;
    
    </summary>
    
      <category term="other" scheme="/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>pycharm模块安装</title>
    <link href="/2020/06/07/pycharm%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85/"/>
    <id>/2020/06/07/pycharm模块安装/</id>
    <published>2020-06-07T11:10:58.000Z</published>
    <updated>2020-06-09T10:35:11.154Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>直接在linux终端中使用pip3安装pygame，能够在终端中使用import导入。然而在pycharm却没有发现相应模块，这里是使用pycharm进行开发时候正确的安装模块姿势。<br><a id="more"></a></p></blockquote><p><code>File</code>-&gt;<code>Settings</code>-&gt;<code>Project:untitled</code>-&gt;<code>Project interperter</code>-&gt;<code>+</code>-&gt;search &amp;&amp; install</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;直接在linux终端中使用pip3安装pygame，能够在终端中使用import导入。然而在pycharm却没有发现相应模块，这里是使用pycharm进行开发时候正确的安装模块姿势。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python文件和目录操作</title>
    <link href="/2020/06/05/python%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C/"/>
    <id>/2020/06/05/python文件和目录操作/</id>
    <published>2020-06-05T10:46:58.000Z</published>
    <updated>2020-06-05T11:06:53.391Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用系统模块os，对文件和目录进行操作。<br><a id="more"></a></p></blockquote><ul><li>在 终端 / 文件浏览器、 中可以执行常规的 文件 / 目录 管理操作，例如：<br>创建、重命名、删除、改变路径、查看目录内容、……</li><li>在 Python 中，如果希望通过程序实现上述功能，需要导入 <strong>os 模块</strong></li></ul><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><table><thead><tr><th>序号</th><th>方法名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>01</td><td>rename</td><td>重命名文件</td><td>os.rename(原文件名， 目标文件名)</td></tr><tr><td>02</td><td>remove</td><td>删除文件</td><td>os.remove(文件名)</td></tr></tbody></table><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><table><thead><tr><th>序号</th><th>方法名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>01</td><td>listdir</td><td>目录列表</td><td>os.listdir(目录名)</td></tr><tr><td>02</td><td>mkdir</td><td>创建目录</td><td>os.mkdir(目录名)</td></tr><tr><td>03</td><td>rmdir</td><td>删除目录</td><td>os.rmdir(目录名)</td></tr><tr><td>04</td><td>getcwd</td><td>获取当前目录</td><td>os.getcwd()</td></tr><tr><td>05</td><td>chdir</td><td>修改当前目录</td><td>os.chdir(目标目录)</td></tr><tr><td>06</td><td>path.isdir</td><td>判断是否是目录</td><td>os.path.isdir(文件路径)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用系统模块os，对文件和目录进行操作。&lt;br&gt;
    
    </summary>
    
      <category term="语言学习" scheme="/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python包（package）与发布</title>
    <link href="/2020/06/05/python%E5%8C%85%EF%BC%88package%EF%BC%89%E4%B8%8E%E5%8F%91%E5%B8%83/"/>
    <id>/2020/06/05/python包（package）与发布/</id>
    <published>2020-06-05T10:34:58.000Z</published>
    <updated>2020-06-05T10:45:29.818Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>将模块进行打包，并且发布给其他开发者使用<br><a id="more"></a></p></blockquote><h2 id="1-包"><a href="#1-包" class="headerlink" title="1. 包"></a>1. 包</h2><h3 id="1-1-包概念"><a href="#1-1-包概念" class="headerlink" title="1.1 包概念"></a>1.1 包概念</h3><ul><li>包 是一个 <strong>包含多个模块</strong> 的 特殊目录</li><li>目录下有一个 特殊的文件 <code>__init__.py</code></li><li>包名的 命名方式 和变量名一致，小写字母 + _</li></ul><h3 id="1-2-init"><a href="#1-2-init" class="headerlink" title="1.2 __init__"></a>1.2 <code>__init__</code></h3><p>要在外界使用 包 中的模块，需要在 <code>__init__.py</code> 中指定 对外界提供的模块列表</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 当前目录 导入 模块列表</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> send_message</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> receive_message</span><br></pre></td></tr></table></figure><blockquote><p>注意：上述方式会让你开发的时候不得不使用多重点表示法去调用函数<code>package.sub_package.func()</code>，替换的方法是直接在<code>__init__</code>中编写函数，这样调用函数时应该编写<code>package.func()</code>。这和其他系统模块一致。</p></blockquote><h2 id="2-发布模块"><a href="#2-发布模块" class="headerlink" title="2. 发布模块"></a>2. 发布模块</h2><p>如果希望自己开发的模块，分享 给其他人，可以按照以下步骤操作</p><h3 id="2-1-制作发布压缩包步骤"><a href="#2-1-制作发布压缩包步骤" class="headerlink" title="2.1 制作发布压缩包步骤"></a>2.1 制作发布压缩包步骤</h3><p>在模块同一目录下创建 <strong>setup.py</strong>，输入：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core import setup</span><br><span class="line"></span><br><span class="line">setup(<span class="attribute">name</span>=<span class="string">"hm_message"</span>,  # 包名</span><br><span class="line">      <span class="attribute">version</span>=<span class="string">"1.0"</span>,  # 版本</span><br><span class="line">      <span class="attribute">description</span>=<span class="string">"itheima's 发送和接收消息模块"</span>,  # 描述信息</span><br><span class="line">      <span class="attribute">long_description</span>=<span class="string">"完整的发送和接收消息模块"</span>,  # 完整描述信息</span><br><span class="line">      <span class="attribute">author</span>=<span class="string">"itheima"</span>,  # 作者</span><br><span class="line">      <span class="attribute">author_email</span>=<span class="string">"itheima@itheima.com"</span>,  # 作者邮箱</span><br><span class="line">      <span class="attribute">url</span>=<span class="string">"www.itheima.com"</span>,  # 主页</span><br><span class="line">      py_modules=[<span class="string">"hm_message.send_message"</span>,</span><br><span class="line">                  <span class="string">"hm_message.receive_message"</span>])</span><br></pre></td></tr></table></figure></p><p>构建模块<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python3</span> setup.<span class="keyword">py</span> build</span><br></pre></td></tr></table></figure></p><p>生成发布压缩包<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python3</span> setup.<span class="keyword">py</span> sdist</span><br></pre></td></tr></table></figure></p><h3 id="2-2-安装模块"><a href="#2-2-安装模块" class="headerlink" title="2.2 安装模块"></a>2.2 安装模块</h3><p>将模块给予使用者，然后让他安装模块的系统上<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf hm_message-<span class="number">1.0</span><span class="selector-class">.tar</span>.gz</span><br><span class="line"></span><br><span class="line">$ sudo python3 setup<span class="selector-class">.py</span> install</span><br></pre></td></tr></table></figure></p><h3 id="2-3-卸载模块"><a href="#2-3-卸载模块" class="headerlink" title="2.3 卸载模块"></a>2.3 卸载模块</h3><p>直接从安装目录下，把安装模块的 目录 删除就可以<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/<span class="class"><span class="keyword">lib</span>/<span class="title">python3</span>.5/<span class="title">dist</span>-<span class="title">packages</span>/</span></span><br><span class="line">$ sudo rm -r hm_message*</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;将模块进行打包，并且发布给其他开发者使用&lt;br&gt;
    
    </summary>
    
      <category term="语言学习" scheme="/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python模块测试</title>
    <link href="/2020/06/05/python%E6%A8%A1%E5%9D%97%E6%B5%8B%E8%AF%95/"/>
    <id>/2020/06/05/python模块测试/</id>
    <published>2020-06-05T10:29:58.000Z</published>
    <updated>2020-06-05T10:33:56.942Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>利用<strong>name</strong>字符串实现模块测试，而不影响主程序的使用<br><a id="more"></a></p></blockquote><h2 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h2><p><code>__name__</code> 是 <code>Python</code> 的一个内置属性，记录着一个 字符串。</p><p>如果 是被其他文件导入的，<code>__name__</code> 就是 模块名</p><p>如果 是当前执行的程序 <code>__name__</code> 是 <code>__main__</code></p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 导入模块</span></span><br><span class="line"><span class="meta"># 定义全局变量</span></span><br><span class="line"><span class="meta"># 定义类</span></span><br><span class="line"><span class="meta"># 定义函数</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 在代码的最下方</span></span><br><span class="line">def main():</span><br><span class="line">    # ...</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"><span class="meta"># 根据 __name__ 判断是否执行下方代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;利用&lt;strong&gt;name&lt;/strong&gt;字符串实现模块测试，而不影响主程序的使用&lt;br&gt;
    
    </summary>
    
      <category term="语言学习" scheme="/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python单例设计模式</title>
    <link href="/2020/06/03/python%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>/2020/06/03/python单例设计模式/</id>
    <published>2020-06-03T15:30:58.000Z</published>
    <updated>2020-06-02T16:27:48.715Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>单例设计模式——让类创建的对象，在系统中只有唯一的一个实例。每一次执行 类名() 返回的对象，内存地址是相同的<br><a id="more"></a></p></blockquote><h2 id="new-方法"><a href="#new-方法" class="headerlink" title="__new__ 方法"></a><code>__new__</code> 方法</h2><ul><li>使用 <strong>类名()</strong> 创建对象时，Python 的解释器 <strong>首先</strong> 会 调用 <code>__new__</code> 方法为对象 <strong>分配空间</strong><br><code>__new__</code> 是一个 由 object 基类提供的 内置的静态方法，主要作用有两个：<ul><li>1) 在内存中为对象 <strong>分配空间</strong></li><li>2) <strong>返回</strong> 对象的引用</li></ul></li><li>Python 的解释器获得对象的 <strong>引用* 后，将引用作为 </strong>第一个参数**，传递给 <code>__init__</code>方法</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>关键：<strong>自定义<code>__new__</code>方法</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义类属性记录单例对象引用</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 判断类属性是否已经被赋值</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 返回类属性的单例引用</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;单例设计模式——让类创建的对象，在系统中只有唯一的一个实例。每一次执行 类名() 返回的对象，内存地址是相同的&lt;br&gt;
    
    </summary>
    
      <category term="语言学习" scheme="/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python类属性和类方法</title>
    <link href="/2020/06/02/python%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/"/>
    <id>/2020/06/02/python类属性和类方法/</id>
    <published>2020-06-02T15:30:58.000Z</published>
    <updated>2020-06-02T16:21:24.796Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录python类属性和类方法，并且引申静态方法<br><a id="more"></a></p></blockquote><h2 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h2><ul><li><strong>类属性</strong> 就是给 <strong>类对象</strong> 中定义的 <strong>属性</strong></li><li>通常用来记录 与这个类相关 的特征</li><li>类属性 不会用于记录 具体对象的特征</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img/20200602_1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">class</span> Tool(object):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用赋值语句，定义类属性，记录创建工具对象的总数</span></span><br><span class="line">    <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    def __init__(self, <span class="built_in">name</span>):</span><br><span class="line">        self.<span class="built_in">name</span> = <span class="built_in">name</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 针对类属性做一个计数+1</span></span><br><span class="line">        Tool.<span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建工具对象</span></span><br><span class="line">tool1 = Tool(<span class="string">"斧头"</span>)</span><br><span class="line">tool2 = Tool(<span class="string">"榔头"</span>)</span><br><span class="line">tool3 = Tool(<span class="string">"铁锹"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 知道使用 Tool 类到底创建了多少个对象?</span></span><br><span class="line">print(<span class="string">"现在创建了 %d 个工具"</span> % Tool.<span class="built_in">count</span>)</span><br></pre></td></tr></table></figure><h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><ul><li><strong>类方法</strong> 就是针对 <strong>类对象</strong> 定义的方法</li><li>在 <strong>类方法</strong> 内部可以直接访问 <strong>类属性</strong> 或者调用其他的 <strong>类方法</strong></li></ul><p>语法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 类方法名<span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><ul><li><p>在开发时，如果需要在 类 中封装一个方法，这个方法：</p><ul><li>既 <strong>不需要</strong> 访问 <strong>实例属性</strong> 或者调用 <strong>实例方法</strong></li><li>也 <strong>不需要</strong> 访问 <strong>类属性</strong> 或者调用 <strong>类方法</strong></li></ul></li><li>这个时候，可以把这个方法封装成一个 <strong>静态方法</strong></li></ul><p>语法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 静态方法名<span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录python类属性和类方法，并且引申静态方法&lt;br&gt;
    
    </summary>
    
      <category term="语言学习" scheme="/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python私有属性和私有方法</title>
    <link href="/2020/06/02/python%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7%E5%92%8C%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/"/>
    <id>/2020/06/02/python私有属性和私有方法/</id>
    <published>2020-06-02T14:30:58.000Z</published>
    <updated>2020-06-02T08:03:36.572Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录python私有属性和私有方法的实现，并且讨论两者的实现方式<br><a id="more"></a></p></blockquote><h2 id="应用场景及定义方式"><a href="#应用场景及定义方式" class="headerlink" title="应用场景及定义方式"></a>应用场景及定义方式</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>在实际开发中，对象 的 某些属性或方法 可能只希望 在对象的内部被使用，而 不希望在外部被访问到</li><li><strong>私有属性</strong> 就是 对象 不希望公开的 属性</li><li><strong>私有方法</strong> 就是 对象 不希望公开的 方法</li></ul><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><ul><li>在 定义属性或方法时，在 属性名或者方法名前 <strong>增加 两个下划线</strong>，定义的就是 私有 属性或方法</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img/20200602.png" alt="类图" title>                </div>                <div class="image-caption">类图</div>            </figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Women</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name)</span></span><span class="symbol">:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="comment"># 不要问女生的年龄</span></span><br><span class="line">        <span class="keyword">self</span>.__age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__secret</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">"我的年龄是 %d"</span> % <span class="keyword">self</span>.__age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaofang = Women(<span class="string">"小芳"</span>)</span><br><span class="line"><span class="comment"># 私有属性，外部不能直接访问</span></span><br><span class="line"><span class="comment"># print(xiaofang.__age)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 私有方法，外部不能直接调用</span></span><br><span class="line"><span class="comment"># xiaofang.__secret()</span></span><br></pre></td></tr></table></figure><h2 id="伪私有属性和私有方法（科普）"><a href="#伪私有属性和私有方法（科普）" class="headerlink" title="伪私有属性和私有方法（科普）"></a>伪私有属性和私有方法（科普）</h2><blockquote><p>提示：在日常开发中，<strong>不要使用这种方式，访问对象的 私有属性 或 私有方法</strong></p></blockquote><p><code>Python</code> 中，并没有 真正意义 的 私有</p><ul><li>在给 属性、方法 命名时，实际是对 名称 做了一些特殊处理，使得外界无法访问到</li><li>处理方式：在 名称 前面加上 _类名 =&gt; _类名__名</li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 私有属性，外部不能直接访问到</span></span><br><span class="line"><span class="keyword">print</span>(xiaofang._Women__age)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 私有方法，外部不能直接调用</span></span><br><span class="line">xiaofang._Women__secret()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录python私有属性和私有方法的实现，并且讨论两者的实现方式&lt;br&gt;
    
    </summary>
    
      <category term="语言学习" scheme="/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python高级数据类型常用操作</title>
    <link href="/2020/05/30/python%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>/2020/05/30/python高级数据类型常用操作/</id>
    <published>2020-05-30T14:30:58.000Z</published>
    <updated>2020-06-02T07:44:36.581Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录python高级数据类型的常用操作，便于查阅<br><a id="more"></a></p></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><table><thead><tr><th>序号</th><th>分类</th><th>关键字 / 函数 / 方法</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>增加</td><td>列表.insert(索引, 数据)</td><td>在指定位置插入数据</td></tr><tr><td></td><td></td><td>列表.append(数据)</td><td>在末尾追加数据</td></tr><tr><td></td><td></td><td>列表.extend(列表2)</td><td>将列表2 的数据追加到列表</td></tr><tr><td>2</td><td>修改</td><td>列表[索引] = 数据</td><td>修改指定索引的数据</td></tr><tr><td>3</td><td>删除</td><td>del 列表[索引]</td><td>删除指定索引的数据</td></tr><tr><td></td><td></td><td>列表.remove[数据]</td><td>删除第一个出现的指定数据</td></tr><tr><td></td><td></td><td>列表.pop</td><td>删除末尾数据</td></tr><tr><td></td><td></td><td>列表.pop(索引)</td><td>删除指定索引数据</td></tr><tr><td></td><td></td><td>列表.clear</td><td>清空列表</td></tr><tr><td>4</td><td>统计</td><td>len(列表)</td><td>列表长度</td></tr><tr><td></td><td></td><td>列表.count(数据)</td><td>数据在列表中出现的次数</td></tr><tr><td>5</td><td>排序</td><td>列表.sort()</td><td>升序排序</td></tr><tr><td></td><td></td><td>列表.sort(reverse=True)</td><td>降序排序</td></tr><tr><td></td><td></td><td>列表.reverse()</td><td>逆序、反转</td></tr></tbody></table><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><table><thead><tr><th>序号</th><th>关键字/函数/方法</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>tuple.index(“value”)</td><td>查找值为value的元素下标</td></tr><tr><td>2</td><td>tuple.count(“value”)</td><td>统计值为count的元素个数</td></tr></tbody></table><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典和列表非常相似</p><table><thead><tr><th>序号</th><th>分类</th><th>关键字 / 函数 / 方法</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>取值</td><td>dict.values()</td><td>获取所有value</td></tr><tr><td></td><td></td><td>dict.keys()</td><td>获取所有key</td></tr><tr><td></td><td></td><td>dict.item()</td><td>获取所有键值对</td></tr><tr><td>2</td><td>合并</td><td>dict.update(dict2)</td><td>将dict2合并到dict中</td></tr><tr><td>3</td><td>删除</td><td>dict.pop(“key”)</td><td>删除key对应的键值对</td></tr><tr><td></td><td></td><td>del dict[“key”]</td><td>除key对应的键值对</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table><thead><tr><th>序号</th><th>关键字/函数/方法</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>string.index(“sub_string”)</td><td>查找字串sub_string第一次出现的下标</td></tr><tr><td>2</td><td>string.count(“sub_string”)</td><td>统计字串sub_string出现的次数</td></tr><tr><td>3</td><td>len(string)</td><td>返回字符串的长度</td></tr></tbody></table><h3 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.isspace()</td><td>如果 string 中只包含空格，则返回 True</td></tr><tr><td>string.isalnum()</td><td>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True</td></tr><tr><td>string.isalpha()</td><td>如果 string 至少有一个字符并且所有字符都是字母则返回 True</td></tr><tr><td>string.isdecimal()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code></td></tr><tr><td>string.isdigit()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>、<code>⑴</code>、<code>\u00b2</code></td></tr><tr><td>string.isnumeric()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>，<code>汉字数字</code></td></tr><tr><td>string.istitle()</td><td>如果 string 是标题化的(每个单词的首字母大写)则返回 True</td></tr><tr><td>string.islower()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True</td></tr><tr><td>string.isupper()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True</td></tr></tbody></table><h3 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.startswith(str)</td><td>检查字符串是否是以 str 开头，是则返回 True</td></tr><tr><td>string.endswith(str)</td><td>检查字符串是否是以 str 结束，是则返回 True</td></tr><tr><td>string.find(str, start=0, end=len(string))</td><td>检测 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 <code>-1</code></td></tr><tr><td>string.rfind(str, start=0, end=len(string))</td><td>类似于 find()，不过是从右边开始查找</td></tr><tr><td>string.index(str, start=0, end=len(string))</td><td>跟 find() 方法类似，不过如果 str 不在 string 会报错</td></tr><tr><td>string.rindex(str, start=0, end=len(string))</td><td>类似于 index()，不过是从右边开始</td></tr><tr><td>string.replace(old_str, new_str, num=string.count(old))</td><td>把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次</td></tr></tbody></table><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.capitalize()</td><td>把字符串的第一个字符大写</td></tr><tr><td>string.title()</td><td>把字符串的每个单词首字母大写</td></tr><tr><td>string.lower()</td><td>转换 string 中所有大写字符为小写</td></tr><tr><td>string.upper()</td><td>转换 string 中的小写字母为大写</td></tr><tr><td>string.swapcase()</td><td>翻转 string 中的大小写</td></tr></tbody></table><h3 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.ljust(width)</td><td>返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.rjust(width)</td><td>返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.center(width)</td><td>返回一个原字符串居中，并使用空格填充至长度 width 的新字符串</td></tr></tbody></table><h3 id="去除空白字符"><a href="#去除空白字符" class="headerlink" title="去除空白字符"></a>去除空白字符</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.lstrip()</td><td>截掉 string 左边（开始）的空白字符</td></tr><tr><td>string.rstrip()</td><td>截掉 string 右边（末尾）的空白字符</td></tr><tr><td>string.strip()</td><td>截掉 string 左右两边的空白字符</td></tr></tbody></table><h3 id="拆分和连接"><a href="#拆分和连接" class="headerlink" title="拆分和连接"></a>拆分和连接</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.partition(str)</td><td>把字符串 string 分成一个 3 元素的元组 (str前面, str, str后面)</td></tr><tr><td>string.rpartition(str)</td><td>类似于 partition() 方法，不过是从右边开始查找</td></tr><tr><td>string.split(str=””, num)</td><td>以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + 1 个子字符串，str 默认包含 ‘\r’, ‘\t’, ‘\n’ 和空格</td></tr><tr><td>string.splitlines()</td><td>按照行(‘\r’, ‘\n’, ‘\r\n’)分隔，返回一个包含各行作为元素的列表</td></tr><tr><td>string.join(seq)</td><td>以 string 作为分隔符，将 seq 中所有的元素（的字符串表示）合并为一个新的字符串</td></tr></tbody></table><h2 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录python高级数据类型的常用操作，便于查阅&lt;br&gt;
    
    </summary>
    
      <category term="语言学习" scheme="/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>pycharm costomized configuration</title>
    <link href="/2020/05/29/pycharm%20costomized%20configuration/"/>
    <id>/2020/05/29/pycharm costomized configuration/</id>
    <published>2020-05-29T14:30:58.000Z</published>
    <updated>2020-05-29T14:30:27.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>PyCharm Community Edition is a free and open-source IDE which is perfect for pure Python coding. For professional Web and Scientific development see PyCharm Professional Edition.</p></blockquote><a id="more"></a><h2 id="default-restoring"><a href="#default-restoring" class="headerlink" title="default restoring"></a>default restoring</h2><p>type in console<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -r ~/.PyCharm2016<span class="number">.3</span></span><br></pre></td></tr></table></figure></p><p>filename <code>PyCharm2016.3</code> can be changed as your need.</p><h2 id="interpreter-selecting"><a href="#interpreter-selecting" class="headerlink" title="interpreter selecting"></a>interpreter selecting</h2><p>enter into <code>file</code> -&gt; <code>settings</code> -&gt; <code>Project:xxx</code> -&gt; <code>project interpreter</code> -&gt; select your new interpreter.</p><h2 id="font-style"><a href="#font-style" class="headerlink" title="font style"></a>font style</h2><p><code>file</code>-&gt;<code>settings</code>-&gt;<code>editor</code>-&gt;<code>colors &amp; fonts</code>-&gt;<code>font</code> or <code>console font</code> -&gt; choose your favor font style and size.</p><h2 id="download-and-install"><a href="#download-and-install" class="headerlink" title="download and install"></a>download and install</h2><ol><li>download package from relative web site. (nomally xxx.tar.gz)</li><li>decompress the package</li><li>move the folder to <code>/opt</code></li><li>change current location to <code>/opt/pycharm-xxx/bin</code></li><li>run <code>./pycharm.sh</code></li></ol><h2 id="console-word-wraps"><a href="#console-word-wraps" class="headerlink" title="console word wraps"></a>console word wraps</h2><ol><li>open the python console</li><li>click the first button <code>soft-wrap</code> </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;PyCharm Community Edition is a free and open-source IDE which is perfect for pure Python coding. For professional Web and Scientific development see PyCharm Professional Edition.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="python" scheme="/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>n皇后问题</title>
    <link href="/2020/05/10/n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
    <id>/2020/05/10/n皇后问题/</id>
    <published>2020-05-10T03:43:21.000Z</published>
    <updated>2020-05-10T07:31:47.533Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>n皇后问题是指在n*n的国际象棋棋盘上放置n个皇后，使得n个皇后两两均不在同一行、同一列、同一条对角线上，求合法的方案数。<br><a id="more"></a></p></blockquote><p>根本方法是利用<code>全排列</code>和<code>筛选</code>。</p><h2 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;math.h&gt;</span><br><span class="line"><span class="built_in">int</span> count=<span class="number">0</span>, n;</span><br><span class="line"><span class="built_in">int</span> P[MAX], Hash[MAX]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">void</span> generateP(index)&#123;</span><br><span class="line">    <span class="keyword">if</span>(index==n+<span class="number">1</span>)&#123;  <span class="comment">// 递归边界</span></span><br><span class="line">        <span class="built_in">int</span> i,j, flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;  <span class="comment">// 筛选</span></span><br><span class="line">            <span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(abs(i-j)==abs(P[i]-P[j])) flag=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>) count++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="built_in">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Hash[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            P[index]=i;</span><br><span class="line">            Hash[i]==<span class="number">1</span>;</span><br><span class="line">            generateP(index+<span class="number">1</span>);</span><br><span class="line">            Hash[i]==<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><p>略</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;n皇后问题是指在n*n的国际象棋棋盘上放置n个皇后，使得n个皇后两两均不在同一行、同一列、同一条对角线上，求合法的方案数。&lt;br&gt;
    
    </summary>
    
      <category term="algorithum" scheme="/categories/algorithum/"/>
    
    
      <category term="算法" scheme="/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>英文短文朗读规则</title>
    <link href="/2020/04/22/%E8%8B%B1%E6%96%87%E7%9F%AD%E6%96%87%E6%9C%97%E8%AF%BB%E8%A7%84%E5%88%99-md/"/>
    <id>/2020/04/22/英文短文朗读规则-md/</id>
    <published>2020-04-22T15:06:07.000Z</published>
    <updated>2020-04-22T15:12:21.800Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>A manual for speaking English.<br><a id="more"></a></p></blockquote><h1 id="发音规则"><a href="#发音规则" class="headerlink" title="发音规则"></a>发音规则</h1><p>中文说圆润，多加练习。</p><h2 id="1-词中重音"><a href="#1-词中重音" class="headerlink" title="1. 词中重音"></a>1. 词中重音</h2><p>名词多数第一个重读，二元动词放在第二个音节</p><h2 id="2-句中重音"><a href="#2-句中重音" class="headerlink" title="2. 句中重音"></a>2. 句中重音</h2><ol><li>一个内容词，重读；</li><li>两个内容词，第二个重读；</li><li>a+n : stress n；</li><li>a+a+n: stress first a and n；</li><li>n+n : stress the first n (+ing = n)；</li><li>v-prep: stress v (make-up)；</li><li>n+ prep : stress prep；</li><li>人名地名: stress the last；</li><li>Abbr: strss the last letter；<br>10 .from me/ for them 全部轻读</li><li>prep + 两个词以上，要重读最后一个</li><li>anything是虚的</li></ol><h2 id="3-升降调"><a href="#3-升降调" class="headerlink" title="3. 升降调"></a>3. 升降调</h2><ol><li>yes/no (声调)</li><li>wh (降调)</li><li>并列词 除了最后一个降调，其他升调</li><li>介绍性语句，升调</li></ol><h2 id="4-省略"><a href="#4-省略" class="headerlink" title="4. 省略"></a>4. 省略</h2><ol><li>元音合并、辅音省略</li><li>her him he she 省略辅音</li><li>辅音一致可以省略一个 sh sh</li></ol><h2 id="5-浊化"><a href="#5-浊化" class="headerlink" title="5. 浊化"></a>5. 浊化</h2><ol><li>辅音字母在两元音之间要被浊化 photo -&gt; phodo</li><li>p-b t-d s-z c-g-k f-v 浊化</li></ol><h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6. 其他"></a>6. 其他</h2><p>basically/actually/practically/physically/accidentally/generally 省略a音</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;A manual for speaking English.&lt;br&gt;
    
    </summary>
    
      <category term="English" scheme="/categories/English/"/>
    
    
      <category term="发音" scheme="/tags/%E5%8F%91%E9%9F%B3/"/>
    
  </entry>
  
  <entry>
    <title>visual c++ 2010 express: LNK1123</title>
    <link href="/2020/03/28/visual-c-2010-express-LNK1123/"/>
    <id>/2020/03/28/visual-c-2010-express-LNK1123/</id>
    <published>2020-03-28T10:37:42.000Z</published>
    <updated>2020-03-28T10:59:38.772Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>the first time I installed visual c++ express 2010, I found that there are something wrong in progress funtion. It said : <code>LINK : fatal error LNK1123: failure during conversion to COFF: file invalid or corrupt</code>.</p></blockquote><p>If I just compile my <code>.cpp</code> file, it works well. But when runing the <code>.exe</code> file, it is not.</p><p>The key problem is that the <code>cvtres.exe</code> in VC directory does not work, because it is too old to support the application. However, the windows system has a new one. That is, when the application start to work, it will find the old one and ignore the other.</p><p>The solution is simple. First, open <code>...\VCExpress\VC\bin</code> and find out <code>cvtres.exe</code>. Second, rename <code>cvtres.exe</code> to <code>cvtres_old.exe</code>.</p><p>OKay, your app is working well.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;the first time I installed visual c++ express 2010, I found that there are something wrong in progress funtion. It said : &lt;c
      
    
    </summary>
    
      <category term="工具" scheme="/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="visual c++" scheme="/tags/visual-c/"/>
    
  </entry>
  
  <entry>
    <title>How to make Atom adapted to Markdown by Plug-ins</title>
    <link href="/2019/04/02/How-to-make-Atom-adapted-to-Markdown-by-Plug-ins/"/>
    <id>/2019/04/02/How-to-make-Atom-adapted-to-Markdown-by-Plug-ins/</id>
    <published>2019-04-01T16:33:57.000Z</published>
    <updated>2019-04-01T16:45:55.164Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Atom is light application for simple modification. Usually, I use Atom to write Markdown. Althouth it has a default configuration, it is not enough for me to type a MD document dignity elegantly. So, Plug-ins is required.<br><a id="more"></a></p></blockquote><p>Just several steps, let’s go!</p><h2 id="go-into-the-interface"><a href="#go-into-the-interface" class="headerlink" title="go into the interface"></a>go into the interface</h2><p>Packages&gt;&gt;Settings View&gt;&gt;Open&gt;&gt;Install</p><h2 id="download-what-you-need"><a href="#download-what-you-need" class="headerlink" title="download what you need"></a>download what you need</h2><ol><li>language-markdown</li><li>markdown-writer</li><li>markdown-preview</li></ol><p>Then you can press <code>Ctrl+Shift+M</code> to open Markdown preview.</p><p>That’s all! Bye.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Atom is light application for simple modification. Usually, I use Atom to write Markdown. Althouth it has a default configuration, it is not enough for me to type a MD document dignity elegantly. So, Plug-ins is required.&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="markdown" scheme="/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>漫画正弦 Comic Sine</title>
    <link href="/2019/04/01/%E6%9B%B2%E7%BA%BF%E6%B1%82%E8%A7%A3Curve-Solving/"/>
    <id>/2019/04/01/曲线求解Curve-Solving/</id>
    <published>2019-04-01T14:17:24.000Z</published>
    <updated>2019-04-01T17:17:19.356Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近，我的老师们讲述了他们的现实故事和独有的人生真理，让我对于人生真理求解的过程有了进一步的理解。现实，它在我人生某个阶段抛出了一个终极问题：人生求解曲线应该是怎么样的？于是有了这篇文章。这篇文章讲述了一个业余梦想家的故事。<br><a id="more"></a></p></blockquote><p>2025年，中国又完成了一个小目标。某些人，期待狂欢。</p><p>雨露清晨，美国纽约。小号中式房间里，Sine习惯性地穿上了他那洗的发白T裇和牛仔裤，带上了标志性的右指套。捎上一份不那么重要的演讲稿，Sine打开了房门，走下了楼梯。</p><p>今天，和其他时间稍微不一样。</p><p>一个披着红色头发的少年，站在街角，等待着命运的到来。Sine走出公寓门口，刚转了身，少年尾随其后，从腰间掏出了一把USP，往那个人心脏处开了一枪。Sine倒下了。临死瞬间，Sine看着天空，脑海记忆闪烁。</p><p>时间倒退27年。</p><p>那时候，Sine还没得到“他的名字”，他最初叫“李正弦”。出生前，他父亲从书架上摸出了一本古老的《高等数学》，快速浏览片刻，就指着那个弯曲的图像，为他命了名，希望他长大能当个数学家，并在日常中给他灌输知识。</p><p>但在正弦5岁那年，有一件事情改变了他的轨道。当时，日本动漫产业飞速发展，无数至今为人熟知的作品市场挂在中国电视屏幕。正弦当时深深迷上了《灌篮高手》，他用了他2个月的零花钱，买了好几本正版的漫画书。他第一次被平面图形和篮球运动的碰撞深深打动。他把书翻了又翻，每次细看总有不一样的快乐。这件事后来被父亲知道了，以有碍学习之名，将漫画书撕个粉碎。</p><p>但他内心感受到召唤，来自二维世界的召唤。</p><p>正弦像很多孩子那样，度过了小学、中学、高中。正弦很刻苦学习，在年级排名也不差，父亲因此也不怎么在意他那小小的兴趣。他有时拿起铅笔画画，用歪曲的图像阐述着他曾经幼稚的故事。有时上网冲浪，翻遍各大网站寻找优秀的漫画作品。他有一些志同道合的朋友，这些朋友都对二维世界非常沉迷。他对他的朋友吹牛说，他大学要学动画。</p><p>但现实是一条曲线。</p><p>高考填报志愿期间，正弦背着父母，把志愿改成了二本学校，专业改成了动画制作。这次“尝试偷渡”首先被老师发现了，再后是父母。正弦免不了父亲的一顿毒打，一向疼爱儿子的妈妈，这次也站在父亲那边。正弦的成绩确实可以上一本，但它远远不够拿到一个他想要的专业。面对灼热的气氛，正弦人生第一次跪了下来，他说，这是他人生唯一的请求，这是他所喜欢的专业，他最钟爱的事业，请父母相信，他一定会做得很好的。父母潸然泪下，点了点头。</p><p>本应是这样的。</p><p>实际那个男孩，他的所有勇气，在跪下之前，早已消逝。他早就知道，那时候的中国动画行业非常不景气，原因首先是国家的不支持，其次是盗版泛滥，漫画家和动画公司要想幸存，几乎不可能。这样一条路，连自己也看不到未来。他顺从了父母的想法，填了一本的学校，学了跟数学有关的专业。</p><p>从那时起，整个大学期间，每当他看到了优秀的设计、精良的动画，内心就会被绞痛。</p><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近，我的老师们讲述了他们的现实故事和独有的人生真理，让我对于人生真理求解的过程有了进一步的理解。现实，它在我人生某个阶段抛出了一个终极问题：人生求解曲线应该是怎么样的？于是有了这篇文章。这篇文章讲述了一个业余梦想家的故事。&lt;br&gt;
    
    </summary>
    
      <category term="短篇小说" scheme="/categories/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/"/>
    
    
      <category term="短篇小说" scheme="/tags/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="short novel" scheme="/tags/short-novel/"/>
    
  </entry>
  
  <entry>
    <title>chrome extension</title>
    <link href="/2019/04/01/%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6chrome-extension%EF%BC%88%E8%8B%B1%E6%96%87%EF%BC%89/"/>
    <id>/2019/04/01/谷歌浏览器插件chrome-extension（英文）/</id>
    <published>2019-04-01T12:55:26.000Z</published>
    <updated>2020-03-18T13:09:36.233Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Several days ago, I re-installed my computer system, means I have lost my chrome extensions I showed fancy to. Back then, however, I slipped up and spent time a lot to handle this extension. For friendly using in the future, I take a note about the process.<br><a id="more"></a></p></blockquote><h2 id="程序包无效-The-package-is-invalid"><a href="#程序包无效-The-package-is-invalid" class="headerlink" title="程序包无效 The package is invalid"></a>程序包无效 The package is invalid</h2><p>While there are a lot of useful extensions to install, I attempt to go throuth the <code>google store</code> to pick up them. Sadly, domestic wall is too steady that I can’t drop by the site. What about installing by hand? For some reasons, it doesn’t work! A paper written by <a href="https://blog.csdn.net/ppdyhappy/article/details/81014800" target="_blank" rel="noopener">ppdyhappy</a> sort the problem.</p><ol><li><p>Firstly, you should download a <code>.crx</code> extension package you like from the extension site. Of course, when you draw the <code>.crx</code> package into the chrome, it will respond with <strong>the package is invalid</strong>.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/23433138/55330517-d1662900-54c3-11e9-8f53-7fcc26108d65.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p>Change the file extensive name <code>.crx</code> of what you have downloaded into <code>.zip</code> or <code>.rar</code>.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/23433138/55330819-96b0c080-54c4-11e9-978a-e5355835a632.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>Right click this file. After decompressed with decompression software like <strong>WINRAR</strong>, you will get a new folder.<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/23433138/55331178-5140c300-54c5-11e9-8fdd-8decc6196ccb.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>Key in Address Bar <code>chrome://extensions/</code> to open the <code>chrome browser extensive management interface</code>. Switch on the <strong>Developer mode(开发者模式)</strong>, and choose <strong>加载正在开发的扩展程序..</strong>，upload the folder you have decompressed.<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/23433138/55331906-dc6e8880-54c6-11e9-8d38-271face04711.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>Normally, you have added a extension to chrome. If you suffer from the attendant problme, you can click <a href="https://blog.csdn.net/ppdyhappy/article/details/81014800" target="_blank" rel="noopener">original site</a> in search of solution.<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/23433138/55332411-e9d84280-54c7-11e9-8d14-51ed6948479a.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ol><h2 id="必备插件-Essential-extension"><a href="#必备插件-Essential-extension" class="headerlink" title="必备插件 Essential extension"></a>必备插件 Essential extension</h2><h3 id="1-谷歌访问助手-Google-Access-Assistant"><a href="#1-谷歌访问助手-Google-Access-Assistant" class="headerlink" title="1. 谷歌访问助手 Google Access Assistant"></a>1. 谷歌访问助手 Google Access Assistant</h3><p>Google Access Assistant is a awesome extension, allowing you to access <strong>google.com(谷歌搜索)</strong>、<strong>mail.google.com（gmail邮箱）</strong> and <strong>chrome store(谷歌商店访问)</strong> without VPN. But you just can use it in 12 hours unless you follow the action of <a href="https://jingyan.baidu.com/article/d2b1d102a89a925c7f37d445.html" target="_blank" rel="noopener">this site</a>. Because of being modified by third party, it smells of nasty money.</p><h3 id="2-Tampermonkey"><a href="#2-Tampermonkey" class="headerlink" title="2. Tampermonkey"></a>2. Tampermonkey</h3><p>This extension allow you to download file beyond 1G in the <strong>Baidu</strong> website, instead of download a PC application in addition. What you should do is just to download the <strong>Tampermonkey</strong> and pose apropriate <strong>script</strong>. More detail about how is in this site</p><p><a href="http://www.cnplugins.com/tool/baiduyun-tampermonkey.html" target="_blank" rel="noopener">图文详解如何利用chrome插件tampermonkey突破百度云盘下载限制</a></p><h3 id="3-Adblock-Plus"><a href="#3-Adblock-Plus" class="headerlink" title="3. Adblock Plus"></a>3. Adblock Plus</h3><p>When you are surfing online, there are no end of websites showing off their product by Ad block. Since you have <strong>Adblock Plus</strong>, you get rid of chaos and click throuth the website more quickly.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Several days ago, I re-installed my computer system, means I have lost my chrome extensions I showed fancy to. Back then, however, I slipped up and spent time a lot to handle this extension. For friendly using in the future, I take a note about the process.&lt;br&gt;
    
    </summary>
    
    
      <category term="chrome extension" scheme="/tags/chrome-extension/"/>
    
      <category term="browser" scheme="/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>关于科学使用计算机</title>
    <link href="/2019/03/28/%E5%85%B3%E4%BA%8E%E7%A7%91%E5%AD%A6%E4%BD%BF%E7%94%A8%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    <id>/2019/03/28/关于科学使用计算机/</id>
    <published>2019-03-27T16:00:04.000Z</published>
    <updated>2019-04-06T08:02:54.012Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>想象一下，你的上司，或者你的男女朋友，不经意看见你的电脑桌面有十几二十个图标，会有什么反应？你把你的房间收拾得很好，但总不能让你的电脑留下”Nasty”的骂名对吧？根据我的个人经验，总结了计算机管理中比较好的“习惯”。<br><a id="more"></a></p></blockquote><p><em>总的来说，计算机管理方法是——优雅</em></p><p><em>内容有点多，但是坚持下真的可以赢得上司的加分</em></p><h2 id="桌面管理"><a href="#桌面管理" class="headerlink" title="桌面管理"></a>桌面管理</h2><h3 id="1-桌面凌乱"><a href="#1-桌面凌乱" class="headerlink" title="1.桌面凌乱"></a>1.桌面凌乱</h3><p>桌面保持整洁，像博主我的桌面就只有5个图标，这样能够提高效率。<code>This PC</code>是我的电脑；<code>Sundries</code>是杂物，专门放一些无法分类的小文件，比如头像等；<code>Entertain</code>是娱乐文件夹，放置了所有程序的快捷方式；<code>Recycle Bin</code>是垃圾桶；<code>Work Place</code>是工作文件夹，无论是学习资料，还是最近的工作文件（毕业论文），我都放进去了，当然是“软链接”。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/23433138/55093389-482faa80-50ef-11e9-93b2-6ac65bbab7c9.png" alt="my desktop" title>                </div>                <div class="image-caption">my desktop</div>            </figure><h3 id="2-软链接使用"><a href="#2-软链接使用" class="headerlink" title="2. 软链接使用"></a>2. 软链接使用</h3><p>比如我正在写<strong>毕业论文</strong>，我要进入<code>This Pc</code>，然后又点击别的什么玩意，找啊找啊，多麻烦。这时候，请使用<strong>软链接</strong>，在<code>Work Place</code>文件夹中新建一个<code>short cut</code>。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/23433138/55096391-c0e53580-50f4-11e9-8de9-f3c41ea3e824.png" alt="short cut" title>                </div>                <div class="image-caption">short cut</div>            </figure></p><p>让它指向你的毕业论文文件夹即可，这时候就可以用<code>Work Place</code>进入你的毕业论文文件夹了。当你写完论文了，又可以将这个软链接删除。</p><h3 id="3-Start开始的使用"><a href="#3-Start开始的使用" class="headerlink" title="3. Start开始的使用"></a>3. Start开始的使用</h3><p>大家可以欣赏下我的<code>Start</code>（win 10）。按键盘左下角的<code>win</code>键进入，或者windows默认的左下角（对应图中的右上角）。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/23433138/55098108-2edf2c00-50f8-11e9-8f5f-340ee8865637.png" alt="desktop" title>                </div>                <div class="image-caption">desktop</div>            </figure><br>我习惯把常用软件都放在这个地方，这样快捷方便，而且很优雅，这是我推荐win 10的原因（win7/xp的朋友自然没这种待遇）。</p><h3 id="4-关于桌面管理软件"><a href="#4-关于桌面管理软件" class="headerlink" title="4. 关于桌面管理软件"></a>4. 关于桌面管理软件</h3><p>某些软件，比如<code>wallpaper</code>诸如之类的软件，能够为你的桌面增加一些模块，有的能够列出你常用的软件，有的为你的桌面装扮炫酷的壁纸和特效。这类软件前者占用资源相对较少，后者则非常恐怖。但如果你的电脑已经进入暮年了，那还是不要用这些花里胡哨的东西了。</p><h2 id="管理软件"><a href="#管理软件" class="headerlink" title="管理软件"></a>管理软件</h2><h3 id="1-杀毒软件"><a href="#1-杀毒软件" class="headerlink" title="1. 杀毒软件"></a>1. 杀毒软件</h3><p>首推<code>火绒</code>。火绒是非常简洁的杀毒软件，内含垃圾清理等模块，基本满足一般PC的需求，并且不会有弹窗，杀毒性能优秀。永远不推荐360，360有很多捆绑软件，稍有不甚就下载了。当长期使用360，后台一些程序会长期占用你的CPU和内存，但它没什么作用，这跟病毒有什么区别？</p><h3 id="2-驱动软件"><a href="#2-驱动软件" class="headerlink" title="2. 驱动软件"></a>2. 驱动软件</h3><p>硬件要配合软件，长期更新硬件驱动（比如显卡驱动）有助于让你的计算机再相同配置下跑得更快。</p><p>我推荐<code>鲁大师</code>和<code>驱动精灵</code>。我常用的是<code>鲁大师</code>，没什么，就是用习惯了。<code>驱动精灵</code>用过一段时间，但是弹窗相对厉害，就停止了。</p><h2 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h2><h3 id="1-浏览器"><a href="#1-浏览器" class="headerlink" title="1. 浏览器"></a>1. 浏览器</h3><p>推荐用谷歌的<code>chrome</code>，除了快，还能使用一些插件。其他浏览器像<code>firefox</code>、<code>opera</code>、<code>Edge</code>等，我都推荐，但是<code>chrome</code>真的公认的优秀。很多前后端（网页）做得比较垃圾（我不是指谁，就是说我学校的教务系统），需要用到<code>360</code>、<code>UC</code>一类浏览器，但我还是建议，长期使用<code>chrome</code>比较好。<code>360</code>等浏览器可以留在你的硬盘，但一定要屏蔽掉所有副作用，比如<strong>篡改你的主页</strong>（最恶心，没有之一）。</p><h3 id="2-没想到，嘿嘿"><a href="#2-没想到，嘿嘿" class="headerlink" title="2. 没想到，嘿嘿"></a>2. 没想到，嘿嘿</h3><h2 id="习惯养成"><a href="#习惯养成" class="headerlink" title="习惯养成"></a>习惯养成</h2><h3 id="1-开机不启动"><a href="#1-开机不启动" class="headerlink" title="1. 开机不启动"></a>1. 开机不启动</h3><p>很多软件，比如<code>鲁大师</code>，会设置开机启动。但我明明有了<code>火绒</code>这个真爱了，为甚么还要你这个二奶呢？不用的程序请禁用掉，否则从开机开始一直占用你的资源。否则，不要问为什么会卡。</p><h3 id="2-下载的软件不要放在C盘"><a href="#2-下载的软件不要放在C盘" class="headerlink" title="2. 下载的软件不要放在C盘"></a>2. 下载的软件不要放在C盘</h3><p>C盘是系统盘，应该保持它只放系统文件就可以了。如果有病毒感染，第一时间受灾的必定是系统盘，更不用说挽救你桌面的毕业论文了。</p><h3 id="3-删除捆绑软件"><a href="#3-删除捆绑软件" class="headerlink" title="3. 删除捆绑软件"></a>3. 删除捆绑软件</h3><p><code>360</code>等总是捆绑一些软件污染我们的电脑，记得在控制面板清理干净。</p><h3 id="4-定期杀毒和清理垃圾"><a href="#4-定期杀毒和清理垃圾" class="headerlink" title="4. 定期杀毒和清理垃圾"></a>4. 定期杀毒和清理垃圾</h3><p>不用多说了，大家都懂。</p><h3 id="5-实在不行，那就重装"><a href="#5-实在不行，那就重装" class="headerlink" title="5. 实在不行，那就重装"></a>5. 实在不行，那就重装</h3><p>我给许多人装过系统，但是部分反映他们的电脑很快就很卡。这就很奇怪了，我明明给你们装的是同一个ghost安装包，我自己重装也是用这个安装包。计算机很少会出现系统不兼容的问题，因为…系统不兼容硬件诶，那可是大事情啊，老是吃软饭的微软居然会做出不靠谱的系统？我对于“系统不兼容硬件”这种观点保持怀疑的态度，更何况已经更新了许多个版本了。但不管怎么说，人生苦短，实在不行，我选择重装。<a href="/2019/02/16/win10专业版安装/">重装教程</a></p><blockquote><p>保持计算机整洁是个好习惯。多折腾、多去折磨那些陷害我们的捆绑软件，是对强迫他们提升服务体验的间接途径，是一个优秀消费者的维权意识体验，是让自己后院（你的PC）长期绿树开花的优秀习惯。最后，祝每位看到最后的读者，能为自己的上司带来美好的清晨。</p></blockquote><p><em>end</em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;想象一下，你的上司，或者你的男女朋友，不经意看见你的电脑桌面有十几二十个图标，会有什么反应？你把你的房间收拾得很好，但总不能让你的电脑留下”Nasty”的骂名对吧？根据我的个人经验，总结了计算机管理中比较好的“习惯”。&lt;br&gt;
    
    </summary>
    
    
      <category term="计算机管理" scheme="/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>removable disk病毒删除</title>
    <link href="/2019/03/02/removable-disk%E7%97%85%E6%AF%92%E5%88%A0%E9%99%A4/"/>
    <id>/2019/03/02/removable-disk病毒删除/</id>
    <published>2019-03-01T16:55:22.000Z</published>
    <updated>2019-03-01T17:11:28.049Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前阵子在红外实验室的电脑发现了一个病毒，名为removable disk。当你将U盘插入到感染病毒的电脑中，你U盘里面的东西会“消失”。<br><a id="more"></a></p></blockquote><p>要处理这个病毒，可以选择以下方法（亲测）。</p><ol><li>将U盘在别的电脑清空，保留一个<strong>杀毒软件安装包</strong>（杀毒软件我推荐<strong>火绒</strong>）</li><li>将U盘插入到受病毒感染的电脑上，这时候可以发现东西都不见了</li><li>操作：<strong>我的电脑</strong>-&gt;<strong>查看</strong>-&gt;<strong>隐藏的项目</strong>，可以在U盘看到存在一个<strong>无名</strong>隐藏文件夹</li><li>点击这个<strong>无名</strong>隐藏的文件夹，可以看到你U盘里面的东西都转移到这里了</li><li>将文件夹里面的东西（杀毒软件安装包）复制到U盘的主目录，然后打开杀毒软件安装包，安装杀毒软件</li><li>进入<strong>杀毒软件</strong>进行全盘杀毒（像火绒这类杀完毒都会报警），这时候重启发现U盘的东西还在（成功了）</li><li>为了避免已经中毒的U盘再次感染电脑，请<strong>保留杀毒软件</strong></li></ol><p>完成</p>]]></content>
    
    <summary type="html">
    
      no
    
    </summary>
    
    
      <category term="病毒" scheme="/tags/%E7%97%85%E6%AF%92/"/>
    
  </entry>
  
  <entry>
    <title>win10专业版安装</title>
    <link href="/2019/02/16/win10%E4%B8%93%E4%B8%9A%E7%89%88%E5%AE%89%E8%A3%85/"/>
    <id>/2019/02/16/win10专业版安装/</id>
    <published>2019-02-16T13:30:34.000Z</published>
    <updated>2019-03-01T16:53:58.315Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>win10专业版，半年激活一下，安装流程记录。<br><a id="more"></a></p></blockquote><h2 id="1-重装准备"><a href="#1-重装准备" class="headerlink" title="1. 重装准备"></a>1. 重装准备</h2><ol><li>一个8G以上的<strong>U盘</strong>，最好将里面的东西清理干净</li><li>在PC上安装<a href="http://www.winbaicai.com/" target="_blank" rel="noopener">大白菜U盘启动盘制作工具</a></li><li>启动大白菜工具，进入操作界面（如图）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/23433138/52900648-53133780-3233-11e9-8f1d-69b181a59249.png" alt="大白菜界面" title>                </div>                <div class="image-caption">大白菜界面</div>            </figure></li><li>选择要刻录的U盘，再点击<strong>一键制作成USB启动盘</strong></li><li>可以选择性点击<strong>模拟启动</strong>，观看PE操作界面</li><li>准备一个<em>win10专业纯净版ghost</em>，后缀为iso，复制到U盘里面（PE和iso文件是独立的）</li></ol><h2 id="2-重装开始"><a href="#2-重装开始" class="headerlink" title="2. 重装开始"></a>2. 重装开始</h2><ol><li>重启电脑，一般来说，不需要设置BIOS的启动顺序，直接就能进入PE选择界面（如图）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/23433138/52900742-adf95e80-3234-11e9-847d-c223673111fb.png" alt="大白菜选择界面" title>                </div>                <div class="image-caption">大白菜选择界面</div>            </figure></li><li>选择<strong>启动Win10 X64 PE（2G以上启动）</strong>，进入PE<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/23433138/52900767-16e0d680-3235-11e9-9f32-bccf0742939c.png" alt="PE" title>                </div>                <div class="image-caption">PE</div>            </figure></li><li>之后操作，按照<a href="http://www.winbaicai.com/video_460.html" target="_blank" rel="noopener">官方操作指南</a>即可</li><li>另外，选择ghost的时候，建议选择<strong>Win10专业纯净版</strong>，因为个人自己下载的ghost并没有被识别。</li></ol><h2 id="3-重装问题"><a href="#3-重装问题" class="headerlink" title="3. 重装问题"></a>3. 重装问题</h2><h3 id="垃圾捆绑软件"><a href="#垃圾捆绑软件" class="headerlink" title="垃圾捆绑软件"></a>垃圾捆绑软件</h3><p>大白菜这个ghost，表面是写着纯净版，实际上捆绑了五六个如360等流氓软件，通用方法：<strong>进入控制面板逐一删除</strong>。</p><h3 id="数字间隔问题"><a href="#数字间隔问题" class="headerlink" title="数字间隔问题"></a>数字间隔问题</h3><p>通过默认输入法打汉字，字距没有问题，但英文、数字等都有很大间隔，看起来很不和谐，这是圆角半角的问题，建议方法：参照<strong><a href="https://jingyan.baidu.com/article/1e5468f948b3a6484861b75e.html" target="_blank" rel="noopener">这里</a></strong></p><h3 id="fn关闭问题"><a href="#fn关闭问题" class="headerlink" title="fn关闭问题"></a>fn关闭问题</h3><p>笔记本特有问题。输入一些字符的时候（比如<code>0</code>）会输出<code>0</code>键上面另外的符号（如<code>)</code>），如果按着<code>fn</code>键再按<code>0</code>，这才输出<code>0</code>。这个是fn键默认开启的原因，建议方法：<strong>同时按下<code>Fn</code>+<code>Num lock</code></strong>关闭<code>fn键</code></p><h3 id="不能连接校园网"><a href="#不能连接校园网" class="headerlink" title="不能连接校园网"></a>不能连接校园网</h3><p>这个是输入法问题，解决以上两个问题即可解决。</p><h3 id="win10激活问题"><a href="#win10激活问题" class="headerlink" title="win10激活问题"></a>win10激活问题</h3><p>普通家庭版Win10是可以免费的，但是由于安装的是专业版，功能更为强大，目前没有完美的破解方案，所以只能通过“薛定谔的激活”来维持。建议方法：保存并使用自带<strong>KMSAuto</strong>工具</p><h3 id="旧系统清除问题"><a href="#旧系统清除问题" class="headerlink" title="旧系统清除问题"></a>旧系统清除问题</h3><p>安装了新系统之后，旧系统残留在其他地方，这使得用户每次开机都得选择启动盘，这非常麻烦，最好是将旧系统盘格式化，但是用新系统格式化旧系统盘会提示<strong>权限不够</strong>。建议方法：进入PE，点击<strong>分区工具</strong>，格式化旧系统盘</p><h3 id="删除引导"><a href="#删除引导" class="headerlink" title="删除引导"></a>删除引导</h3><p>即使格式化旧系统盘，旧引导可能残留。建议方法：进入PE，点击<strong>引导修复</strong>，处理掉旧印度</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;win10专业版，半年激活一下，安装流程记录。&lt;br&gt;
    
    </summary>
    
    
      <category term="装机" scheme="/tags/%E8%A3%85%E6%9C%BA/"/>
    
  </entry>
  
</feed>
